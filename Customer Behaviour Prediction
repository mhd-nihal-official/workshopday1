{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMe1HFTDsSvmRI71roqzwJ1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# <span style = \"color:green\"> Customer Behaviour Classification </span>\n","\n","---\n","\n"],"metadata":{"id":"QyshXcrNARmI"}},{"cell_type":"markdown","source":["In this project, we will try to predict if the customer purchase the product or not using various machine learning models and Deploy the model with Tkinter library"],"metadata":{"id":"ZmZ3ofcuAf6A"}},{"cell_type":"markdown","source":["## Contents"],"metadata":{"id":"PBkvGMmfAxwP"}},{"cell_type":"markdown","source":["The data represents details about 400 clients of a company including the unique ID, the gender, the age of the customer and the salary. Besides this, we have collected information regarding the buying decision - weather the customer decided to buy specific products or not."],"metadata":{"id":"l6ga0SBBA7WA"}},{"cell_type":"markdown","source":["### Import all necessary libraries"],"metadata":{"id":"fTm_0m61BAJp"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"6mN5kvoNBMC_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Read 'Customer_Behaviour.csv' dataset and store it in a dataframe variable"],"metadata":{"id":"fcaDWBsVBQ4J"}},{"cell_type":"code","source":[],"metadata":{"id":"5X9Zg8RvCOQ_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv('Customer_Behaviour.csv')"],"metadata":{"id":"Mt1bBWkwBSTD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### View the top 5 rows"],"metadata":{"id":"TU4yoZiVDrj5"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ccvXa9zzDsgR","executionInfo":{"status":"ok","timestamp":1737785013477,"user_tz":-330,"elapsed":17,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ee20099f-1d15-4fc4-fe43-70170278ebd6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510    Male   19            19000          0\n","1  15810944    Male   35            20000          0\n","2  15668575  Female   26            43000          0\n","3  15603246  Female   27            57000          0\n","4  15804002    Male   19            76000          0"],"text/html":["\n","  <div id=\"df-95db8576-cab1-4f4c-8192-62a9b3438e63\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95db8576-cab1-4f4c-8192-62a9b3438e63')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-95db8576-cab1-4f4c-8192-62a9b3438e63 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-95db8576-cab1-4f4c-8192-62a9b3438e63');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb98ffab-38c4-4bb7-926c-12cf97127599\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb98ffab-38c4-4bb7-926c-12cf97127599')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb98ffab-38c4-4bb7-926c-12cf97127599 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71658,\n        \"min\": 15566689,\n        \"max\": 15815236,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          15697424,\n          15609669,\n          15776733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### View info of the dataset"],"metadata":{"id":"TPkp8P6YDy4a"}},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UeuE-MH7D2Yl","executionInfo":{"status":"ok","timestamp":1737785070146,"user_tz":-330,"elapsed":489,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"7b265e2d-5106-4a1c-c4e5-314f581b2262"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 400 entries, 0 to 399\n","Data columns (total 5 columns):\n"," #   Column           Non-Null Count  Dtype \n","---  ------           --------------  ----- \n"," 0   User ID          400 non-null    int64 \n"," 1   Gender           400 non-null    object\n"," 2   Age              400 non-null    int64 \n"," 3   EstimatedSalary  400 non-null    int64 \n"," 4   Purchased        400 non-null    int64 \n","dtypes: int64(4), object(1)\n","memory usage: 15.8+ KB\n"]}]},{"cell_type":"markdown","source":["### View basic statistical information about the dataset"],"metadata":{"id":"7MDaawtcRM8x"}},{"cell_type":"code","source":["df.describe()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"bxZ8EC2PRN-d","executionInfo":{"status":"ok","timestamp":1737885313300,"user_tz":-330,"elapsed":370,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"a7c79fb6-6869-4ee6-80ee-e70d11a365c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            User ID         Age  EstimatedSalary   Purchased\n","count  4.000000e+02  400.000000       400.000000  400.000000\n","mean   1.569154e+07   37.655000     69742.500000    0.357500\n","std    7.165832e+04   10.482877     34096.960282    0.479864\n","min    1.556669e+07   18.000000     15000.000000    0.000000\n","25%    1.562676e+07   29.750000     43000.000000    0.000000\n","50%    1.569434e+07   37.000000     70000.000000    0.000000\n","75%    1.575036e+07   46.000000     88000.000000    1.000000\n","max    1.581524e+07   60.000000    150000.000000    1.000000"],"text/html":["\n","  <div id=\"df-052dfa8f-025f-4732-a933-591b7bd7ec83\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>4.000000e+02</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.569154e+07</td>\n","      <td>37.655000</td>\n","      <td>69742.500000</td>\n","      <td>0.357500</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>7.165832e+04</td>\n","      <td>10.482877</td>\n","      <td>34096.960282</td>\n","      <td>0.479864</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.556669e+07</td>\n","      <td>18.000000</td>\n","      <td>15000.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.562676e+07</td>\n","      <td>29.750000</td>\n","      <td>43000.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.569434e+07</td>\n","      <td>37.000000</td>\n","      <td>70000.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.575036e+07</td>\n","      <td>46.000000</td>\n","      <td>88000.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.581524e+07</td>\n","      <td>60.000000</td>\n","      <td>150000.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-052dfa8f-025f-4732-a933-591b7bd7ec83')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-052dfa8f-025f-4732-a933-591b7bd7ec83 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-052dfa8f-025f-4732-a933-591b7bd7ec83');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-af0a3989-bf90-4a65-b586-36e38dbf031d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af0a3989-bf90-4a65-b586-36e38dbf031d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-af0a3989-bf90-4a65-b586-36e38dbf031d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7247165.99146923,\n        \"min\": 400.0,\n        \"max\": 15815236.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15691539.7575,\n          15694341.5,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.27423677374767,\n        \"min\": 10.48287659730792,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.655,\n          37.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47214.004060407126,\n        \"min\": 400.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          69742.5,\n          70000.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 141.27865845809382,\n        \"min\": 0.0,\n        \"max\": 400.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3575,\n          1.0,\n          0.4798639635968701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["### Check for any null values"],"metadata":{"id":"b4p_j4sMRXc8"}},{"cell_type":"code","source":["df.isna().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"_nlX3iKoRZD2","executionInfo":{"status":"ok","timestamp":1737788610535,"user_tz":-330,"elapsed":429,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"acf194b2-233c-4ab9-e5b2-304cccfbc0f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["User ID            0\n","Gender             0\n","Age                0\n","EstimatedSalary    0\n","Purchased          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>User ID</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>EstimatedSalary</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Purchased</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["### View unique values in Gender"],"metadata":{"id":"xehQ32P-RkfQ"}},{"cell_type":"code","source":["df['Gender'].unique()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r3HsWybeRlkh","executionInfo":{"status":"ok","timestamp":1737788657674,"user_tz":-330,"elapsed":419,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"26a32f40-62fe-4c31-db14-bcfb3f148fea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Male', 'Female'], dtype=object)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["### Convert male to 0 and Female to 1 in Gender column"],"metadata":{"id":"bgxCWyyuRqZ8"}},{"cell_type":"code","source":["def gender(x):\n","    if x=='Male':\n","        return 0\n","    else:\n","        return 1"],"metadata":{"id":"K1jSzi3yRv0z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['Gender']=df['Gender'].apply(gender)\n"],"metadata":{"id":"TStQHnRpRzKR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ZvDlEYfpR3Rk","executionInfo":{"status":"ok","timestamp":1737788725963,"user_tz":-330,"elapsed":432,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"d721c0dd-88b6-4ed2-f45e-41478bb13445"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510       0   19            19000          0\n","1  15810944       0   35            20000          0\n","2  15668575       1   26            43000          0\n","3  15603246       1   27            57000          0\n","4  15804002       0   19            76000          0"],"text/html":["\n","  <div id=\"df-e88c0eb9-6c20-4ac6-9d4c-f0f6c6e5141b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e88c0eb9-6c20-4ac6-9d4c-f0f6c6e5141b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e88c0eb9-6c20-4ac6-9d4c-f0f6c6e5141b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e88c0eb9-6c20-4ac6-9d4c-f0f6c6e5141b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ec0b1b3e-6a9c-4c99-99a3-a44a4b491078\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec0b1b3e-6a9c-4c99-99a3-a44a4b491078')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ec0b1b3e-6a9c-4c99-99a3-a44a4b491078 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71658,\n        \"min\": 15566689,\n        \"max\": 15815236,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          15697424,\n          15609669,\n          15776733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["#### Drop user ID column\n"],"metadata":{"id":"MV93lPFaR7q0"}},{"cell_type":"code","source":["df.drop(columns=['User ID'],inplace=True)\n"],"metadata":{"id":"3hYbKWA3R-ci"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"gdR5LracSGcB","executionInfo":{"status":"ok","timestamp":1737788782762,"user_tz":-330,"elapsed":428,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"17cddf77-cd49-4614-991d-7504552962c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Age  EstimatedSalary  Purchased\n","0       0   19            19000          0\n","1       0   35            20000          0\n","2       1   26            43000          0\n","3       1   27            57000          0\n","4       0   19            76000          0"],"text/html":["\n","  <div id=\"df-118da56c-5708-4817-9cf7-821f6042b0ca\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-118da56c-5708-4817-9cf7-821f6042b0ca')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-118da56c-5708-4817-9cf7-821f6042b0ca button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-118da56c-5708-4817-9cf7-821f6042b0ca');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7ed8ab54-3514-4716-be70-2c8c31b81736\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7ed8ab54-3514-4716-be70-2c8c31b81736')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7ed8ab54-3514-4716-be70-2c8c31b81736 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["# <span style = \"color: orange\"> **Data Visualization** </span>"],"metadata":{"id":"8mLuxwIFSOUs"}},{"cell_type":"markdown","source":["### Plot heatmap to view the correlation between features"],"metadata":{"id":"utn5_45jSvGi"}},{"cell_type":"code","source":["plt.figure(figsize=(5,4))\n","sns.heatmap(df.corr(),annot=True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":474},"id":"oYaWx2itSwCe","executionInfo":{"status":"ok","timestamp":1737788963851,"user_tz":-330,"elapsed":730,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"1711ed2f-5a28-484f-c6d2-01ac18efcf20"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 2 Axes>"],"image/png":"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19eX/ZubIxG9xzkIREREpIBzEIiIPlBXV0dCQoJCeXJyMtTV1QWIiEg4TBCIiD74XIdqZmYmtLS0CjkaImFxDgIRlXirV68GAIhEImzduhV6enqy98RiMS5evIiaNWsKFR6RIDgHgYhKvCpVqgAAnjx5gooVK8oNJ2hpacHKygpz586Fvb29UCESFTomCEREHzg4OODAgQMwMDAQOhQiwTFBICL6DLFYjPDwcFSuXJlJA5U4nKRIRPTB2LFj4evrC+B9cvDdd9+hUaNGsLS0xPnz54UNjqiQMUEgIvpg7969aNCgAQDgyJEjePz4MSIiIjBu3DhMmzZN4OiIChcTBCKiD5KTk2Fubg4AOH78OHr37o0aNWpgyJAhCA8PFzg6osLFBIGI6AMzMzPcu3cPYrEYJ0+exPfffw8ASE9P50ZJVOJwHwQiog9cXFzw888/o3z58hCJRHB0dAQAXL9+nfsgUInDBIGI6IPZs2ejbt26+Oeff9C7d29oa2sDeL8Fs5eXl8DRERUuDjEQUYn3ww8/4PXr1wCAXr16ITMzU243xa5du2LKlClChUckCO6DQEQlnrq6Ol68eAFTU1MAQJkyZRASEoKqVasCAOLj42FhYQGxWCxkmESFij0IRFTiffo9id+biJggEBERUS6YIBBRiScSiSASiRTKiEoyrmIgohJPKpVi8ODBslUL7969w4gRI6CrqwsAyMzMFDI8IkFwkiIRlXguLi5fVc/f37+AIyFSHUwQiIiISAHnIBAREZECJghERESkgAkCERERKWCCQERERAqYIBAREZECJghERESkgAkCERERKWCCQERERAr+BwKFZT0rJxwFAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Plot a countplot of gender with respect to purchased"],"metadata":{"id":"i4r8ZPfUS1o1"}},{"cell_type":"code","source":["plt.figure(figsize=(5,4))\n","sns.countplot(x=df['Gender'],hue=df['Purchased'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"nnu7NEmyS-gu","executionInfo":{"status":"ok","timestamp":1737789020330,"user_tz":-330,"elapsed":470,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"c025970e-44b3-4d1e-dbf9-ff02daead40f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Plot a displot of Age"],"metadata":{"id":"Yvi3AmBcTC1V"}},{"cell_type":"code","source":["plt.figure(figsize=(5,4))\n","sns.displot(x=df['Age'])\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":524},"id":"1YM3WMayTHPh","executionInfo":{"status":"ok","timestamp":1737789057577,"user_tz":-330,"elapsed":438,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"560cec13-6b22-4919-a92b-9a6667b1a793"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["\n","### Plot pairplot of the dataset"],"metadata":{"id":"N1Nar0l3TUR_"}},{"cell_type":"code","source":["plt.figure(figsize=(5,4))\n","sns.pairplot(df)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"4EtXJ6VOTYGh","executionInfo":{"status":"ok","timestamp":1737789128258,"user_tz":-330,"elapsed":4053,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"86299187-eafa-4080-c0c8-f9cdadd5ef1a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 20 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Data Preprocessing**"],"metadata":{"id":"gy50MRWWTiIi"}},{"cell_type":"markdown","source":["### Split the dataset into input and target variables"],"metadata":{"id":"FBHBK9xoTu_i"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QVTbn4PeTv7T","executionInfo":{"status":"ok","timestamp":1737789223726,"user_tz":-330,"elapsed":438,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"f35dc9d7-05fc-4717-e232-f98a63aa7a12"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Age  EstimatedSalary  Purchased\n","0       0   19            19000          0\n","1       0   35            20000          0\n","2       1   26            43000          0\n","3       1   27            57000          0\n","4       0   19            76000          0"],"text/html":["\n","  <div id=\"df-a833e4fe-a396-4fd7-8c57-098441e38d3f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a833e4fe-a396-4fd7-8c57-098441e38d3f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a833e4fe-a396-4fd7-8c57-098441e38d3f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a833e4fe-a396-4fd7-8c57-098441e38d3f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1bae3fe8-a1d1-4662-8bae-ddee686899ca\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bae3fe8-a1d1-4662-8bae-ddee686899ca')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1bae3fe8-a1d1-4662-8bae-ddee686899ca button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["X=df.drop(columns=['Purchased'])\n","y=df['Purchased']"],"metadata":{"id":"OkmJjjluT7Sd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Me3Sk1-DUESN","executionInfo":{"status":"ok","timestamp":1737789298723,"user_tz":-330,"elapsed":456,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"4fb48962-ad65-4e03-b7b1-a8fe6e518f25"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Age  EstimatedSalary\n","0       0   19            19000\n","1       0   35            20000\n","2       1   26            43000\n","3       1   27            57000\n","4       0   19            76000"],"text/html":["\n","  <div id=\"df-8cc331b3-58b2-439c-844c-9b74477ad8da\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>19000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>43000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>57000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>76000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cc331b3-58b2-439c-844c-9b74477ad8da')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8cc331b3-58b2-439c-844c-9b74477ad8da button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8cc331b3-58b2-439c-844c-9b74477ad8da');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-80aa4b0c-8cc1-445f-bb55-64e7f2f1ab4a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80aa4b0c-8cc1-445f-bb55-64e7f2f1ab4a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-80aa4b0c-8cc1-445f-bb55-64e7f2f1ab4a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["y.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"DZ1n9QAbUHwO","executionInfo":{"status":"ok","timestamp":1737789319780,"user_tz":-330,"elapsed":441,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"9c90d3b4-70ea-40f1-ce73-3a1eb0bb2c82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0\n","1    0\n","2    0\n","3    0\n","4    0\n","Name: Purchased, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["### Scale the data using StandardScaler"],"metadata":{"id":"--bEAP2tUO0P"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n"],"metadata":{"id":"ZXJehLvgUP50"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scaler=StandardScaler()"],"metadata":{"id":"gXaLMlgWUW1v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_scaler=scaler.fit_transform(X)"],"metadata":{"id":"frzry6byUXPj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X=pd.DataFrame(x_scaler,columns=X.columns)"],"metadata":{"id":"ixqClmejUd_w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"DeaTino9UhQ3","executionInfo":{"status":"ok","timestamp":1737789416933,"user_tz":-330,"elapsed":479,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"b6acd70e-67b1-4ec4-c922-e5ddcc8dd4da"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Gender       Age  EstimatedSalary\n","0 -1.020204 -1.781797        -1.490046\n","1 -1.020204 -0.253587        -1.460681\n","2  0.980196 -1.113206        -0.785290\n","3  0.980196 -1.017692        -0.374182\n","4 -1.020204 -1.781797         0.183751"],"text/html":["\n","  <div id=\"df-fc0b8bf2-a7f2-42f3-b7ec-ae6c56a69b78\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1.020204</td>\n","      <td>-1.781797</td>\n","      <td>-1.490046</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.020204</td>\n","      <td>-0.253587</td>\n","      <td>-1.460681</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.980196</td>\n","      <td>-1.113206</td>\n","      <td>-0.785290</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.980196</td>\n","      <td>-1.017692</td>\n","      <td>-0.374182</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1.020204</td>\n","      <td>-1.781797</td>\n","      <td>0.183751</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc0b8bf2-a7f2-42f3-b7ec-ae6c56a69b78')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc0b8bf2-a7f2-42f3-b7ec-ae6c56a69b78 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc0b8bf2-a7f2-42f3-b7ec-ae6c56a69b78');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e9bac6a-c9b4-4624-b664-917ff7744dd1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e9bac6a-c9b4-4624-b664-917ff7744dd1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e9bac6a-c9b4-4624-b664-917ff7744dd1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0012523486435152,\n        \"min\": -1.020204061220407,\n        \"max\": 0.9801960588196068,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9801960588196068,\n          -1.020204061220407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0012523486435185,\n        \"min\": -1.8773105578331641,\n        \"max\": 2.134240875847471,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          1.1791095821139865,\n          0.12846515900715358\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0012523486435179,\n        \"min\": -1.6075056615492507,\n        \"max\": 2.3567499772898386,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          1.387709710018061,\n          0.18375059007433778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["### Split the dataset into training and testing set"],"metadata":{"id":"nuKZYVr0UnRq"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n"],"metadata":{"id":"CcrgoW0yUpEh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=100)\n"],"metadata":{"id":"yps3nMtpUvlj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7PaXvWG7U1ZF","executionInfo":{"status":"ok","timestamp":1737789507494,"user_tz":-330,"elapsed":567,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ea7dfedf-9531-4c24-e180-0c48fda63db5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Gender       Age  EstimatedSalary\n","163 -1.020204 -0.253587        -0.932114\n","229  0.980196  0.415005         0.301210\n","213 -1.020204 -0.253587        -0.344817\n","188 -1.020204 -0.253587         0.066291\n","386  0.980196  1.083596        -0.902749"],"text/html":["\n","  <div id=\"df-a63417c0-156f-48c3-afbc-78c103043d6d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>163</th>\n","      <td>-1.020204</td>\n","      <td>-0.253587</td>\n","      <td>-0.932114</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>0.980196</td>\n","      <td>0.415005</td>\n","      <td>0.301210</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>-1.020204</td>\n","      <td>-0.253587</td>\n","      <td>-0.344817</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>-1.020204</td>\n","      <td>-0.253587</td>\n","      <td>0.066291</td>\n","    </tr>\n","    <tr>\n","      <th>386</th>\n","      <td>0.980196</td>\n","      <td>1.083596</td>\n","      <td>-0.902749</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a63417c0-156f-48c3-afbc-78c103043d6d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a63417c0-156f-48c3-afbc-78c103043d6d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a63417c0-156f-48c3-afbc-78c103043d6d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0547d9e6-18e9-495d-bcf9-2a0a886aafd8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0547d9e6-18e9-495d-bcf9-2a0a886aafd8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0547d9e6-18e9-495d-bcf9-2a0a886aafd8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"x_train","summary":"{\n  \"name\": \"x_train\",\n  \"rows\": 300,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0018712392305487,\n        \"min\": -1.020204061220407,\n        \"max\": 0.9801960588196068,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9801960588196068,\n          -1.020204061220407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000300549420285,\n        \"min\": -1.8773105578331641,\n        \"max\": 2.134240875847471,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          -1.8773105578331641,\n          -0.4446136172329372\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0425037672633577,\n        \"min\": -1.6075056615492507,\n        \"max\": 2.3567499772898386,\n        \"num_unique_values\": 109,\n        \"samples\": [\n          0.007561450570378263,\n          -1.4606813786292843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["x_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"rXfoeJ9sU9sn","executionInfo":{"status":"ok","timestamp":1737789533912,"user_tz":-330,"elapsed":513,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"bb03db2b-eefe-4966-b30e-b13695a58c60"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Gender       Age  EstimatedSalary\n","248 -1.020204  0.319491        -0.521006\n","318 -1.020204  0.701544        -1.108303\n","173  0.980196 -0.349100        -0.785290\n","285  0.980196 -0.062561         0.682953\n","184  0.980196 -0.444614        -0.286087"],"text/html":["\n","  <div id=\"df-bf4013e6-f34b-41d8-b9e5-72864b58ef9a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>248</th>\n","      <td>-1.020204</td>\n","      <td>0.319491</td>\n","      <td>-0.521006</td>\n","    </tr>\n","    <tr>\n","      <th>318</th>\n","      <td>-1.020204</td>\n","      <td>0.701544</td>\n","      <td>-1.108303</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>0.980196</td>\n","      <td>-0.349100</td>\n","      <td>-0.785290</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>0.980196</td>\n","      <td>-0.062561</td>\n","      <td>0.682953</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>0.980196</td>\n","      <td>-0.444614</td>\n","      <td>-0.286087</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf4013e6-f34b-41d8-b9e5-72864b58ef9a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bf4013e6-f34b-41d8-b9e5-72864b58ef9a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bf4013e6-f34b-41d8-b9e5-72864b58ef9a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-714bceb0-ff4f-4396-9220-4d7319d9a87c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-714bceb0-ff4f-4396-9220-4d7319d9a87c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-714bceb0-ff4f-4396-9220-4d7319d9a87c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"x_test","summary":"{\n  \"name\": \"x_test\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0020169553594864,\n        \"min\": -1.020204061220407,\n        \"max\": 0.9801960588196068,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9801960588196068,\n          -1.020204061220407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0098655832596926,\n        \"min\": -1.7817974284598157,\n        \"max\": 2.134240875847471,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          -0.15807422911289182,\n          -0.25358735848624026\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8613939507351928,\n        \"min\": -1.6075056615492507,\n        \"max\": 2.3567499772898386,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          0.24248030324232428,\n          -0.37418168502153404\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["y_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"Q2p8-fcIVBF0","executionInfo":{"status":"ok","timestamp":1737789549825,"user_tz":-330,"elapsed":411,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"cb8795d4-0cf1-4d0e-b6fc-e70d1b50f65c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["163    0\n","229    1\n","213    0\n","188    0\n","386    1\n","Name: Purchased, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>163</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>386</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["y_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"BetUhjZHVKPS","executionInfo":{"status":"ok","timestamp":1737789584456,"user_tz":-330,"elapsed":506,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"9fa19619-9435-4cb5-c186-5903c48af783"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["248    0\n","318    1\n","173    0\n","285    1\n","184    0\n","Name: Purchased, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>248</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>318</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["### Check shape of X_train and X_test"],"metadata":{"id":"l6JQk5wMVPLb"}},{"cell_type":"code","source":["x_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0TDSp12VS4l","executionInfo":{"status":"ok","timestamp":1737789630728,"user_tz":-330,"elapsed":460,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"00c7d974-34c2-4a5e-8772-0fc66ea8fbba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(300, 3)"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["x_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OqRFZkpGVXzu","executionInfo":{"status":"ok","timestamp":1737789646988,"user_tz":-330,"elapsed":533,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"9f064f6e-6f83-465b-ddfe-15c3a7c82445"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100, 3)"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["# **ML Models**"],"metadata":{"id":"yP15x8_MVfbc"}},{"cell_type":"markdown","source":["### Logistic Regression Classifier"],"metadata":{"id":"pjwV6pupVnbT"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from  sklearn import metrics\n","from sklearn.model_selection import cross_val_score"],"metadata":{"id":"C8OLa3UaVqMb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model=LogisticRegression()"],"metadata":{"id":"9ZGRblXFVxKJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"IjiFMNG5V0F0","executionInfo":{"status":"ok","timestamp":1737789756004,"user_tz":-330,"elapsed":435,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"853ad002-64b1-4dbf-e302-3727de4708bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print('Score of our trained model is:',model.score(x_train,y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J1__5R9KV38t","executionInfo":{"status":"ok","timestamp":1737789772337,"user_tz":-330,"elapsed":455,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"3047e0c6-a775-4dac-d3fb-7c4ccc5b7385"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score of our trained model is: 0.85\n"]}]},{"cell_type":"code","source":["y_pred=model.predict(x_test)"],"metadata":{"id":"1NIJWCeWV7ir"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oqwe8XQgWG1e","executionInfo":{"status":"ok","timestamp":1737789837186,"user_tz":-330,"elapsed":419,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"436a82e0-12c9-4e1a-cdda-f6b7cc610421"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["print('Accuracy score of our prediction:',metrics.accuracy_score(y_test,y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-YOjwBH_WKZj","executionInfo":{"status":"ok","timestamp":1737789884078,"user_tz":-330,"elapsed":409,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"4fb768e6-8ffa-45d7-bfee-44805cf17b5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score of our prediction: 0.87\n"]}]},{"cell_type":"code","source":["print('Confusion matrix is:')\n","print(metrics.confusion_matrix(y_test,y_pred))\n","print('Classification Report is:')\n","print(metrics.classification_report(y_test,y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"byzqxsYZWXbR","executionInfo":{"status":"ok","timestamp":1737789900318,"user_tz":-330,"elapsed":416,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"be033be3-a2ea-42f6-8e81-5699eee8c59e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion matrix is:\n","[[62  3]\n"," [10 25]]\n","Classification Report is:\n","              precision    recall  f1-score   support\n","\n","           0       0.86      0.95      0.91        65\n","           1       0.89      0.71      0.79        35\n","\n","    accuracy                           0.87       100\n","   macro avg       0.88      0.83      0.85       100\n","weighted avg       0.87      0.87      0.87       100\n","\n"]}]},{"cell_type":"code","source":["print('Mean of cross validation score is:',cross_val_score(LogisticRegression(),X,y,cv=3).mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GTtyzdv-WdMm","executionInfo":{"status":"ok","timestamp":1737789924500,"user_tz":-330,"elapsed":412,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"161e47aa-21f2-4885-ca7c-3faec6ae65cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean of cross validation score is: 0.805072382448659\n"]}]},{"cell_type":"markdown","source":["### Random Forest Classifier\n"],"metadata":{"id":"0KTTp3_YW_fi"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier"],"metadata":{"id":"l-QqptXXXAnE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_r=RandomForestClassifier(n_estimators=20)"],"metadata":{"id":"G3Q3aAzdXEJQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_r.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"0OpMyuivXICG","executionInfo":{"status":"ok","timestamp":1737790105892,"user_tz":-330,"elapsed":471,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"f40f01b6-d006-4a8b-ff1f-e6e0b76e4728"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=20)"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=20)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(n_estimators=20)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["print('Score of our trained model is:',model_r.score(x_train,y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IrHII2NXOOf","executionInfo":{"status":"ok","timestamp":1737790125239,"user_tz":-330,"elapsed":452,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ba38a75a-80f7-4870-dc50-6ee7c73ca713"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score of our trained model is: 0.99\n"]}]},{"cell_type":"code","source":["y_pred_r=model_r.predict(x_test)"],"metadata":{"id":"MCinGIShXQGy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Accuaracy score of our prediction is:',metrics.accuracy_score(y_test,y_pred_r))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QclkU1UdXUkX","executionInfo":{"status":"ok","timestamp":1737790159384,"user_tz":-330,"elapsed":420,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"d7c16a46-58a6-444c-9525-9e6e0796eae3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuaracy score of our prediction is: 0.88\n"]}]},{"cell_type":"code","source":["print('Confusion matrix is:')\n","print(metrics.confusion_matrix(y_test,y_pred_r))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"88SCAaSdXatk","executionInfo":{"status":"ok","timestamp":1737790183916,"user_tz":-330,"elapsed":416,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"db83fb42-3184-4b30-9929-3b927e114f6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion matrix is:\n","[[61  4]\n"," [ 8 27]]\n"]}]},{"cell_type":"code","source":["print('Classification report is:')\n","print(metrics.classification_report(y_test,y_pred_r))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wfuIrjbYX5QS","executionInfo":{"status":"ok","timestamp":1737790349382,"user_tz":-330,"elapsed":413,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"61c4d4ce-5677-45a5-b41c-8e59e4025939"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification report is:\n","              precision    recall  f1-score   support\n","\n","           0       0.88      0.94      0.91        65\n","           1       0.87      0.77      0.82        35\n","\n","    accuracy                           0.88       100\n","   macro avg       0.88      0.85      0.86       100\n","weighted avg       0.88      0.88      0.88       100\n","\n"]}]},{"cell_type":"code","source":["print('Mean of Cross validation score is:',cross_val_score(RandomForestClassifier(),X,y,cv=3).mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-WzBJPgYRX0","executionInfo":{"status":"ok","timestamp":1737790401604,"user_tz":-330,"elapsed":1203,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"bd8f3270-d1fb-47d6-b005-2441c8e6a728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean of Cross validation score is: 0.8574795196947592\n"]}]},{"cell_type":"markdown","source":["### Support Vector Machine"],"metadata":{"id":"beZGEKt5YVS0"}},{"cell_type":"code","source":["from sklearn.svm import SVC"],"metadata":{"id":"dQs6w1QIYWOp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_s=SVC()"],"metadata":{"id":"3inczdT7YaeS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_s.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"91hNOEWzYcU-","executionInfo":{"status":"ok","timestamp":1737790453961,"user_tz":-330,"elapsed":458,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"1cae4dca-924a-47c3-9f30-52c3705ac299"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"],"text/html":["<style>#sk-container-id-3 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-3 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-3 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-3 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-3 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-3 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-3 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-3 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-3 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-3 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-3 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-3 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-3 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-3 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-3 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-3 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-3 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["print('Score of our trained model is',model_s.score(x_train,y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gEvLUVsqYgcU","executionInfo":{"status":"ok","timestamp":1737790470214,"user_tz":-330,"elapsed":420,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"bbb1e628-84c0-4b04-bb68-534b798f33a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score of our trained model is 0.9033333333333333\n"]}]},{"cell_type":"code","source":["y_pred_s=model_s.predict(x_test)"],"metadata":{"id":"8lcZiBTpYn2y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Accuarcy score of our prediction is:',metrics.accuracy_score(y_test,y_pred_s))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xi_dU6WQYskt","executionInfo":{"status":"ok","timestamp":1737790512293,"user_tz":-330,"elapsed":428,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"f09e6f66-3fc1-407d-9e04-c9596945eef0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuarcy score of our prediction is: 0.92\n"]}]},{"cell_type":"code","source":["print('Confusion matrix is:')\n","print(metrics.confusion_matrix(y_test,y_pred_s))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3ShWSNj3Ys6u","executionInfo":{"status":"ok","timestamp":1737790524742,"user_tz":-330,"elapsed":419,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ca924301-94cd-45b5-8ba3-2cf2bf4f56d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion matrix is:\n","[[62  3]\n"," [ 5 30]]\n"]}]},{"cell_type":"code","source":["print('Classification report is:')\n","print(metrics.classification_report(y_test,y_pred_s))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZRorNCqAYxd3","executionInfo":{"status":"ok","timestamp":1737790537729,"user_tz":-330,"elapsed":424,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"928f394d-6fc3-4ce0-c766-c55b2e21878c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification report is:\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.95      0.94        65\n","           1       0.91      0.86      0.88        35\n","\n","    accuracy                           0.92       100\n","   macro avg       0.92      0.91      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n"]}]},{"cell_type":"code","source":["print('Mean of Cross validation score is:',cross_val_score(SVC(),X,y,cv=3).mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6T5vEWIMY3wx","executionInfo":{"status":"ok","timestamp":1737790557037,"user_tz":-330,"elapsed":391,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"7adf7691-1c93-46cc-f8f3-86d49c83cd36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean of Cross validation score is: 0.9049489395129614\n"]}]},{"cell_type":"markdown","source":["### Assign cross val scores of all models into a dataframe"],"metadata":{"id":"QDnO48oYY7B6"}},{"cell_type":"code","source":["a=['Support Vector Machine','Random Forest','Logistic Regression']"],"metadata":{"id":"ZvJNTZjQY8oD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c=pd.DataFrame(a,columns=['Model'])\n"],"metadata":{"id":"3pU56tK-ZAbx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["score=[model_s.score(x_train,y_train),model_r.score(x_train,y_train),model.score(x_train,y_train)]"],"metadata":{"id":"eRZDa2iRZKfV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c['Score']=score"],"metadata":{"id":"efQgIRnpZNOm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"4_CYAXrGZRdu","executionInfo":{"status":"ok","timestamp":1737790664993,"user_tz":-330,"elapsed":1208,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"aa2c977c-f54b-4210-e321-b159beade96e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    Model     Score\n","0  Support Vector Machine  0.903333\n","1           Random Forest  0.990000\n","2     Logistic Regression  0.850000"],"text/html":["\n","  <div id=\"df-f2c2e4b4-688f-4c7b-b982-083747366daf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Support Vector Machine</td>\n","      <td>0.903333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Random Forest</td>\n","      <td>0.990000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Logistic Regression</td>\n","      <td>0.850000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2c2e4b4-688f-4c7b-b982-083747366daf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f2c2e4b4-688f-4c7b-b982-083747366daf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f2c2e4b4-688f-4c7b-b982-083747366daf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-62ce35ff-91fa-4947-98bd-c5421e23b105\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62ce35ff-91fa-4947-98bd-c5421e23b105')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-62ce35ff-91fa-4947-98bd-c5421e23b105 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_25278dc2-cd0c-48a5-b45c-a91b00dd656e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('c')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_25278dc2-cd0c-48a5-b45c-a91b00dd656e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('c');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"c","summary":"{\n  \"name\": \"c\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Support Vector Machine\",\n          \"Random Forest\",\n          \"Logistic Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07065828042482065,\n        \"min\": 0.85,\n        \"max\": 0.99,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.9033333333333333,\n          0.99,\n          0.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":72}]},{"cell_type":"markdown","source":["###**Deploy the model with highest score using Tkinter**###"],"metadata":{"id":"9Be81Gb1ZXTj"}},{"cell_type":"markdown","source":["In this case its SVM Classifier"],"metadata":{"id":"QXzsC0OUZ5t5"}},{"cell_type":"markdown","source":["#### Import all modules from Tkinter\n"],"metadata":{"id":"Z807nZBAZ9Tv"}},{"cell_type":"code","source":["from tkinter import *\n","from tkinter.ttk import Combobox"],"metadata":{"id":"bO9cquu1aA8F"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Define a function that will output to an entry box in Tkinter"],"metadata":{"id":"Viwh4ydFaIK4"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"xzdyeusnaK1j","executionInfo":{"status":"ok","timestamp":1737790905428,"user_tz":-330,"elapsed":474,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ce50b90c-0356-45a1-c801-8190ce156bfe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Age  EstimatedSalary  Purchased\n","0       0   19            19000          0\n","1       0   35            20000          0\n","2       1   26            43000          0\n","3       1   27            57000          0\n","4       0   19            76000          0"],"text/html":["\n","  <div id=\"df-7e45469a-c99a-47bf-894e-628c8328ea93\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e45469a-c99a-47bf-894e-628c8328ea93')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7e45469a-c99a-47bf-894e-628c8328ea93 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7e45469a-c99a-47bf-894e-628c8328ea93');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e34bedea-63ab-418e-b947-0ac77296621e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e34bedea-63ab-418e-b947-0ac77296621e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e34bedea-63ab-418e-b947-0ac77296621e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["def getprediction():\n","    gender1=gender.get()\n","    age1=age.get()\n","    est1=est.get()\n","\n","    if gender=='Male':\n","        gender1=0\n","    else:\n","        gender1=1\n","    x=pd.DataFrame([[gender1,age1,est1]],columns=['Gender','Age','EstimatedSalary'])\n","    y=scaler.transform(x)\n","    prediction=model_s.predict(y)\n","\n","    result.delete(0,END)\n","\n","    if prediction[0]==0:\n","        result.insert(0,'NOT PURCHASED')\n","    else:\n","        result.insert(0,'PURCHASED')\n","\n","\n","\n"],"metadata":{"id":"7i_SgaD2aQwV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Create Tkinter window with all necessary entryboxes and labels"],"metadata":{"id":"0TwphyEPaae2"}},{"cell_type":"code","source":["!apt-get install -y xvfb\n","!pip install c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PN4CCBO2RF9N","executionInfo":{"status":"ok","timestamp":1737955596914,"user_tz":-330,"elapsed":50181,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"7c8f318d-a038-4309-99c0-fd75f4e0b323"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following additional packages will be installed:\n","  libfontenc1 libxfont2 libxkbfile1 x11-xkb-utils xfonts-base xfonts-encodings xfonts-utils\n","  xserver-common\n","The following NEW packages will be installed:\n","  libfontenc1 libxfont2 libxkbfile1 x11-xkb-utils xfonts-base xfonts-encodings xfonts-utils\n","  xserver-common xvfb\n","0 upgraded, 9 newly installed, 0 to remove and 49 not upgraded.\n","Need to get 7,815 kB of archives.\n","After this operation, 11.9 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 libfontenc1 amd64 1:1.1.4-1build3 [14.7 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxfont2 amd64 1:2.0.5-1build1 [94.5 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxkbfile1 amd64 1:1.1.0-1build3 [71.8 kB]\n","Get:4 http://archive.ubuntu.com/ubuntu jammy/main amd64 x11-xkb-utils amd64 7.7+5build4 [172 kB]\n","Get:5 http://archive.ubuntu.com/ubuntu jammy/main amd64 xfonts-encodings all 1:1.0.5-0ubuntu2 [578 kB]\n","Get:6 http://archive.ubuntu.com/ubuntu jammy/main amd64 xfonts-utils amd64 1:7.7+6build2 [94.6 kB]\n","Get:7 http://archive.ubuntu.com/ubuntu jammy/main amd64 xfonts-base all 1:1.0.5 [5,896 kB]\n","Get:8 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 xserver-common all 2:21.1.4-2ubuntu1.7~22.04.12 [28.7 kB]\n","Get:9 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 xvfb amd64 2:21.1.4-2ubuntu1.7~22.04.12 [864 kB]\n","Fetched 7,815 kB in 1s (6,642 kB/s)\n","Selecting previously unselected package libfontenc1:amd64.\n","(Reading database ... 124574 files and directories currently installed.)\n","Preparing to unpack .../0-libfontenc1_1%3a1.1.4-1build3_amd64.deb ...\n","Unpacking libfontenc1:amd64 (1:1.1.4-1build3) ...\n","Selecting previously unselected package libxfont2:amd64.\n","Preparing to unpack .../1-libxfont2_1%3a2.0.5-1build1_amd64.deb ...\n","Unpacking libxfont2:amd64 (1:2.0.5-1build1) ...\n","Selecting previously unselected package libxkbfile1:amd64.\n","Preparing to unpack .../2-libxkbfile1_1%3a1.1.0-1build3_amd64.deb ...\n","Unpacking libxkbfile1:amd64 (1:1.1.0-1build3) ...\n","Selecting previously unselected package x11-xkb-utils.\n","Preparing to unpack .../3-x11-xkb-utils_7.7+5build4_amd64.deb ...\n","Unpacking x11-xkb-utils (7.7+5build4) ...\n","Selecting previously unselected package xfonts-encodings.\n","Preparing to unpack .../4-xfonts-encodings_1%3a1.0.5-0ubuntu2_all.deb ...\n","Unpacking xfonts-encodings (1:1.0.5-0ubuntu2) ...\n","Selecting previously unselected package xfonts-utils.\n","Preparing to unpack .../5-xfonts-utils_1%3a7.7+6build2_amd64.deb ...\n","Unpacking xfonts-utils (1:7.7+6build2) ...\n","Selecting previously unselected package xfonts-base.\n","Preparing to unpack .../6-xfonts-base_1%3a1.0.5_all.deb ...\n","Unpacking xfonts-base (1:1.0.5) ...\n","Selecting previously unselected package xserver-common.\n","Preparing to unpack .../7-xserver-common_2%3a21.1.4-2ubuntu1.7~22.04.12_all.deb ...\n","Unpacking xserver-common (2:21.1.4-2ubuntu1.7~22.04.12) ...\n","Selecting previously unselected package xvfb.\n","Preparing to unpack .../8-xvfb_2%3a21.1.4-2ubuntu1.7~22.04.12_amd64.deb ...\n","Unpacking xvfb (2:21.1.4-2ubuntu1.7~22.04.12) ...\n","Setting up libfontenc1:amd64 (1:1.1.4-1build3) ...\n","Setting up xfonts-encodings (1:1.0.5-0ubuntu2) ...\n","Setting up libxkbfile1:amd64 (1:1.1.0-1build3) ...\n","Setting up libxfont2:amd64 (1:2.0.5-1build1) ...\n","Setting up x11-xkb-utils (7.7+5build4) ...\n","Setting up xfonts-utils (1:7.7+6build2) ...\n","Setting up xfonts-base (1:1.0.5) ...\n","Setting up xserver-common (2:21.1.4-2ubuntu1.7~22.04.12) ...\n","Setting up xvfb (2:21.1.4-2ubuntu1.7~22.04.12) ...\n","Processing triggers for man-db (2.10.2-1) ...\n","Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n","Processing triggers for libc-bin (2.35-0ubuntu3.4) ...\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtcm.so.1 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libumf.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libhwloc.so.15 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_adapter_level_zero.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_loader.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_adapter_opencl.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtcm_debug.so.1 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n","\n","Collecting c\n","  Downloading c-0.1.0-py3-none-any.whl.metadata (3.7 kB)\n","Collecting arrow==0.12.1 (from c)\n","  Downloading arrow-0.12.1.tar.gz (65 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.4/65.4 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting click==6.7 (from c)\n","  Downloading click-6.7-py2.py3-none-any.whl.metadata (424 bytes)\n","Collecting ipython==7.2.0 (from c)\n","  Downloading ipython-7.2.0-py3-none-any.whl.metadata (4.5 kB)\n","Collecting matplotlib==2.2.0 (from c)\n","  Downloading matplotlib-2.2.0.tar.gz (37.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m37.2/37.2 MB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting numpy==1.14.2 (from c)\n","  Downloading numpy-1.14.2.zip (4.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m48.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting pandas==0.22.0 (from c)\n","  Downloading pandas-0.22.0.tar.gz (11.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.3/11.3 MB\u001b[0m \u001b[31m51.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n","  \n","  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\n","  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n","  \u001b[31m╰─>\u001b[0m See above for output.\n","  \n","  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n","  Installing build dependencies ... \u001b[?25l\u001b[?25herror\n","\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n","\n","\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\n","\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n","\u001b[31m╰─>\u001b[0m See above for output.\n","\n","\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n"]}]},{"cell_type":"code","source":["!pyvirtualdisplay"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F74q91TNROz8","executionInfo":{"status":"ok","timestamp":1737955702051,"user_tz":-330,"elapsed":408,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"04517cce-1468-4e73-d882-92489433f638"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: pyvirtualdisplay: command not found\n"]}]},{"cell_type":"code","source":["pip install pyvirtualdisplay"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XZStR0jhC5Ou","executionInfo":{"status":"ok","timestamp":1737955708833,"user_tz":-330,"elapsed":4999,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"a3c758f4-e6f7-470b-9c5e-2458b5280dd7"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyvirtualdisplay\n","  Downloading PyVirtualDisplay-3.0-py3-none-any.whl.metadata (943 bytes)\n","Downloading PyVirtualDisplay-3.0-py3-none-any.whl (15 kB)\n","Installing collected packages: pyvirtualdisplay\n","Successfully installed pyvirtualdisplay-3.0\n"]}]},{"cell_type":"code","source":["!apt-get install -y xvfb\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oANknmTQDCdr","executionInfo":{"status":"ok","timestamp":1737955720013,"user_tz":-330,"elapsed":6772,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"ab0918bd-ae18-446e-a34b-3d673be6492c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","xvfb is already the newest version (2:21.1.4-2ubuntu1.7~22.04.12).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n"]}]},{"cell_type":"code","source":["import os\n","from pyvirtualdisplay import Display\n","import tkinter as tk\n","\n","display = Display(visible=0, size=(800, 600))\n","display.start()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"85oJBIOTUzSS","executionInfo":{"status":"ok","timestamp":1737955731585,"user_tz":-330,"elapsed":1108,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}},"outputId":"28863013-e143-4b20-c8ae-deafd82eedb6"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pyvirtualdisplay.display.Display at 0x78d8cbdaa850>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["window = tk.Tk()  # Initialize Tkinter window\n","window.title('Customer Behaviour Classification')\n","window.geometry('400x400')\n","\n","titlelabel = tk.Label(window, text='Customer Behaviour Classification', bg='skyblue')\n","titlelabel.pack(fill='both')"],"metadata":{"id":"5Ib5_Zi2VFbY","executionInfo":{"status":"ok","timestamp":1737955734076,"user_tz":-330,"elapsed":557,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["glabel = tk.Label(window, text='Gender').pack()\n","gender = tk.Entry(window)  # Or use Combobox if you want dropdown\n","gender.pack()"],"metadata":{"id":"PMcCCxWiVS-3","executionInfo":{"status":"ok","timestamp":1737955737692,"user_tz":-330,"elapsed":509,"user":{"displayName":"Mohammed Nihal","userId":"03667136893484049684"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["window.mainloop()"],"metadata":{"id":"D4-oUh1wVU2h"},"execution_count":null,"outputs":[]}]}